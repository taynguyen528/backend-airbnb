generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model address {
  addressId Int        @id @default(autoincrement())
  street    String     @db.VarChar(255)
  city      String     @db.VarChar(255)
  state     String     @db.VarChar(255)
  zipCode   String     @db.VarChar(10)
  country   String     @db.VarChar(255)
  listroom  listroom[]
}

model amenity {
  amenityId       Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  description     String?           @db.Text
  iconUrl         String?           @db.VarChar(255)
  createdAt       DateTime          @db.DateTime(0)
  listroomamenity listroomamenity[]
}

model listroom {
  listingId          Int                         @id @default(autoincrement())
  title              String                      @db.VarChar(255)
  description        String?                     @db.Text
  pricePerNight      Float                       @db.Float
  availabilityStatus listroom_availabilityStatus
  hostId             Int?
  addressId          Int?
  user               user?                       @relation(fields: [hostId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "listroom_ibfk_1")
  address            address?                    @relation(fields: [addressId], references: [addressId], onDelete: NoAction, onUpdate: NoAction, map: "listroom_ibfk_2")
  listroomamenity    listroomamenity[]
  reservation        reservation[]
  review             review[]

  @@index([addressId], map: "addressId")
  @@index([hostId], map: "hostId")
}

model listroomamenity {
  listRoomId Int
  amenityId  Int
  listroom   listroom @relation(fields: [listRoomId], references: [listingId], onDelete: NoAction, onUpdate: NoAction, map: "listroomamenity_ibfk_1")
  amenity    amenity  @relation(fields: [amenityId], references: [amenityId], onDelete: NoAction, onUpdate: NoAction, map: "listroomamenity_ibfk_2")

  @@id([listRoomId, amenityId])
  @@index([amenityId], map: "amenityId")
}

model message {
  messageId                     Int                @id @default(autoincrement())
  senderId                      Int?
  receiverId                    Int?
  content                       String             @db.Text
  sentDate                      DateTime           @db.Date
  readStatus                    message_readStatus
  user_message_senderIdTouser   user?              @relation("message_senderIdTouser", fields: [senderId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "message_ibfk_1")
  user_message_receiverIdTouser user?              @relation("message_receiverIdTouser", fields: [receiverId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "message_ibfk_2")

  @@index([receiverId], map: "receiverId")
  @@index([senderId], map: "senderId")
}

model notification {
  notificationId Int                     @id @default(autoincrement())
  userId         Int?
  content        String                  @db.Text
  sentDate       DateTime                @db.Date
  readStatus     notification_readStatus
  user           user?                   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "notification_ibfk_1")

  @@index([userId], map: "userId")
}

model payment {
  paymentId     Int                   @id @default(autoincrement())
  reservationId Int?
  amount        Float                 @db.Float
  paymentMethod String                @db.VarChar(255)
  paymentStatus payment_paymentStatus
  paymentDate   DateTime              @db.Date
  reservation   reservation?          @relation(fields: [reservationId], references: [reservationId], onDelete: NoAction, onUpdate: NoAction, map: "payment_ibfk_1")

  @@index([reservationId], map: "reservationId")
}

model reservation {
  reservationId     Int                           @id @default(autoincrement())
  listingId         Int?
  guestId           Int?
  checkInDate       DateTime                      @db.Date
  checkOutDate      DateTime                      @db.Date
  totalPrice        Float                         @db.Float
  reservationStatus reservation_reservationStatus
  payment           payment[]
  listroom          listroom?                     @relation(fields: [listingId], references: [listingId], onDelete: NoAction, onUpdate: NoAction, map: "reservation_ibfk_1")
  user              user?                         @relation(fields: [guestId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "reservation_ibfk_2")

  @@index([guestId], map: "guestId")
  @@index([listingId], map: "listingId")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model review {
  reviewId   Int       @id @default(autoincrement())
  listingId  Int?
  userId     Int?
  rating     Int
  comment    String?   @db.Text
  reviewDate DateTime  @db.Date
  listroom   listroom? @relation(fields: [listingId], references: [listingId], onDelete: NoAction, onUpdate: NoAction, map: "review_ibfk_1")
  user       user?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "review_ibfk_2")

  @@index([listingId], map: "listingId")
  @@index([userId], map: "userId")
}

model user {
  userId                           Int            @id @default(autoincrement())
  name                             String         @db.VarChar(255)
  email                            String         @unique(map: "email") @db.VarChar(255)
  passWord                         String         @db.VarChar(255)
  phoneNumber                      String?        @db.VarChar(15)
  birthDay                         DateTime?      @db.Date
  gender                           user_gender?
  userType                         user_userType
  listroom                         listroom[]
  message_message_senderIdTouser   message[]      @relation("message_senderIdTouser")
  message_message_receiverIdTouser message[]      @relation("message_receiverIdTouser")
  notification                     notification[]
  reservation                      reservation[]
  review                           review[]
}

enum payment_paymentStatus {
  Successful
  Failed
}

enum listroom_availabilityStatus {
  Available
  Booked
}

enum notification_readStatus {
  Unread
  Read
}

enum message_readStatus {
  Unread
  Read
}

enum reservation_reservationStatus {
  Booked
  Cancelled
  Completed
}

enum user_gender {
  Male
  Female
  Other
}

enum user_userType {
  Host
  Guest
}
